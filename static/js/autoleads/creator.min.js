let amazonProducts = [];
let apps = [];


const dropZone = document.getElementById('dropZone');
const containerRect = dropZone.getBoundingClientRect();
let loadLottie = false;
let dropZone_hasFile = false;
const dropZone_base = document.getElementById('dropZone_base');
const success_lottie = document.getElementById('success-lottie');
const error_lottie = document.getElementById('error-lottie');
const dropZone_progress = document.getElementById('dropZone_progress');
const dropZone_progress_obj = document.getElementById('dropZone_progress_obj');
const dropZone_fileBase = document.getElementById('dropZone_fileBase');


showLottie("preview-icon-lottie");

setInterval(function() {
    infoLabelFunc();
}, 10000);

function infoLabelFunc() {
    app_info_label = document.querySelector('.app-info-label');
    if(app_info_label) {
        getInfoFromAppFunc(app_info_label);
    }
}


let fileTypeOk;
let attachment_list = [];
let remainingFiles;

function getFileExtension(e) { 
    e.stopPropagation();
    e.preventDefault();
    e.dataTransfer.dropEffect = 'copy';
    
    for(var i = 0; i < e.dataTransfer.items.length; i++)
    {
        return e.dataTransfer.items[i].type;
    }
}

dropZone.addEventListener('dragover', function(event) {
    event.preventDefault();
    event.stopPropagation();

    if(!loadLottie)
    {
      loadLottie = true;
      const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
      
      const fileExtension = !isSafari ? getFileExtension(event) : 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
      if(fileExtension === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
      {
        fileTypeOk = true;
        dropZone_fileBase.style.display = 'none';
        dropZone_base.style.display = 'none';
        success_lottie.style.removeProperty('display');
        success_lottie.innerHTML = '';
        dropZone.classList.add('border-success');
        showLottie('success-lottie');
      }
      else
      {
        fileTypeOk = false;
        dropZone_fileBase.style.display = 'none';
        dropZone_base.style.display = 'none';
        error_lottie.style.removeProperty('display');
        error_lottie.innerHTML = '';
        dropZone.classList.add('border-error');
        showLottie('error-lottie');
      }
    }
});

dropZone.addEventListener('dragleave', function(event) {
    event.preventDefault();
    const pointerX = event.clientX;
    const pointerY = event.clientY;
  
    if (
      pointerX >= containerRect.left &&
      pointerX <= containerRect.right &&
      pointerY >= containerRect.top &&
      pointerY <= containerRect.bottom
    ) {
      return;
    } else {
        success_lottie.style.display = 'none';
        success_lottie.innerHTML = '';
        error_lottie.style.display = 'none';
        error_lottie.innerHTML = '';
        if(dropZone_hasFile){
            dropZone_fileBase.style.removeProperty('display');
            dropZone_base.style.display = 'none';
        }
        else{
            dropZone_base.style.removeProperty('display');
        }
        dropZone.classList.remove('border-success');
        dropZone.classList.remove('border-error');
        loadLottie = false;
    }
});

dropZone.addEventListener('drop', function(event) {
    event.preventDefault();
    success_lottie.style.display = 'none';
    success_lottie.innerHTML = '';
    dropZone_base.style.removeProperty('display');
    dropZone.classList.remove('border-success');
    dropZone.classList.remove('border-error');
    loadLottie = false;
    handleFiles(event.dataTransfer.files);
});

let fileInput = document.createElement('input');
fileInput.type = 'file';
fileInput.accept = '.xlsx';
fileInput.multiple = true;

fileInput.addEventListener('change', function(event) {
    event.preventDefault();
    fileTypeOk = true;
    handleFiles(event.target.files);
    fileInput.value = '';
});

dropZone.addEventListener('click', function(event) {
    if(dropZone_hasFile){
        return;
    }
    event.preventDefault();
    fileInput.click();
});

function handleFiles(files) {
    loadLottie = false;
    attachment_list.length = 0;
    if (files.length === 0) {
        showToast('error', 'Files can not found!');
        return;
    }

    if(!fileTypeOk) {
        success_lottie.style.display = 'none';
        success_lottie.innerHTML = '';
        error_lottie.style.display = 'none';
        error_lottie.innerHTML = '';
        dropZone_base.style.removeProperty('display');
        dropZone.classList.remove('border-success');
        setTimeout(function(){
            dropZone_hasFile = false;
            table = document.querySelector('#amazon-products-add-table');
            progressBar = document.querySelector('#amazon-products-add-table-progress');
            handleRemoveTable(table, progressBar);
        }, 10);
        return;
    }

    dropZone_base.style.display = 'none';
    success_lottie.style.display = 'none';
    success_lottie.innerHTML = '';
    error_lottie.style.display = 'none';
    error_lottie.innerHTML = '';
    dropZone_progress.style.display = 'none';
    dropZone_fileBase.innerHTML = '';
    dropZone_fileBase.style.removeProperty('display');
    dropZone.classList.add('border-success');
    remainingFiles = files.length;
    for(let i = 0; i < files.length; i++){
        dropZone_hasFile = true;
        var fileName = files[i].name;
        var fileSize = Math.floor(files[i].size / 1024);
        dropZone_fileBase.innerHTML += `<div class="flex flex-row justify-between items-center bg-base-200 rounded-xl"><div class="flex items-center space-x-2 mx-2"><svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="h-4 w-4"><title/><g><g><g><g><path d="M18,22H6a2,2,0,0,1-2-2V4A2,2,0,0,1,6,2h7.1a2,2,0,0,1,1.5.6l4.9,5.2A2,2,0,0,1,20,9.2V20A2,2,0,0,1,18,22Z" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><line fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" x1="7.9" x2="16.1" y1="17.5" y2="17.5"/><line fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" x1="7.9" x2="16.1" y1="13.5" y2="13.5"/><line fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" x1="8" x2="13" y1="9.5" y2="9.5"/></g></g></g></g></svg><div class="text-xs">${fileName}&nbsp;<span class="text-xs opacity-50">(${fileSize}kb)</span></div></div><div class="btn btn-xs btn-circle btn-outline" id="remove_file_btn" name="${fileName}"><svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/></svg></div></div>`;
        attachment_list.push(files[i]);
    }

    if(dropZone_hasFile) {
        sendFilesToServer(attachment_list);
    }
    
    const removeFileBtns = document.querySelectorAll('#dropZone_fileBase div[id="remove_file_btn"]');
    removeFileBtns.forEach(function (removeFileBtn) {
      removeFileBtn.addEventListener('click', function () {
            remainingFiles--;
            attachment_list = attachment_list.filter(function (file) {
                return file.name !== removeFileBtn.getAttribute("name");
            });
            removeFileBtn.parentNode.remove();

            if (remainingFiles === 0) {
                success_lottie.style.display = 'none';
                success_lottie.innerHTML = '';
                error_lottie.style.display = 'none';
                error_lottie.innerHTML = '';
                dropZone_base.style.removeProperty('display');
                dropZone.classList.remove('border-success');
                setTimeout(function(){
                    dropZone_hasFile = false;
                    table = document.querySelector('#amazon-products-add-table');
                    progressBar = document.querySelector('#amazon-products-add-table-progress');
                    handleRemoveTable(table, progressBar);
                }, 10);
            } else {
                sendFilesToServer(attachment_list);
            }
      });
    });
}

let idToPreviewId = {
    'discord-manage-author': '#webhook-preview-author span',
    'discord-manage-author-icon-url': '#webhook-preview-author img',
    'discord-manage-description': '#webhook-preview-description span',
    'discord-manage-description-url': '#webhook-preview-description',
    'discord-manage-thumbnail-url': '#webhook-thumbnail-url',
    'discord-manage-image-url': '#webhook-main-image',
    'discord-manage-footer-text': '#webhook-footer span footer',
    'discord-manage-footer-icon-url': '#webhook-footer img',
    'discord-manage-field-name-1': '#webhook-field-name-1',
    'discord-manage-field-value-1': '#webhook-field-value-1',
};

let lastFocusedInput = null;

function insertAtCaret(input, text) {
    if (input.selectionStart || input.selectionStart == '0') {
        let startPos = input.selectionStart;
        let endPos = input.selectionEnd;
        input.value = input.value.substring(0, startPos) + text + input.value.substring(endPos, input.value.length);
        input.selectionStart = startPos + text.length;
        input.selectionEnd = startPos + text.length;
    } else {
        input.value += text;
    }
}

function applyInputChanges(el) {
    if (!el) return;

    const previewSelector = idToPreviewId[el.id];
    if (!previewSelector) return;

    const previewElement = document.querySelector(previewSelector);
    if (!previewElement) return;

    if (previewElement.tagName === 'IMG') {
        previewElement.src = el.value;
    } else if (previewElement.tagName === 'A') {
        previewElement.href = el.value;
    } else {
        previewElement.innerHTML = el.value;
    }
}

function onHCaptchaCompleted(token) {
    verifyHcaptcha(
        token, 
        function() {
            hecaptchaContainer = document.querySelector('.h-captcha-container');
            hecaptchaSaveBtn = document.createElement('button');
            hecaptchaSaveBtn.classList.add('btn', 'btn-sm', 'btn-block', 'btn-outline', 'text-xl', 'font-bold', 'border-2', 'gap-2');
            hecaptchaSaveBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"><path fill="currentColor" d="M6 5a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v13.131a1 1 0 0 1-1.555.832l-3.89-2.593a1 1 0 0 0-1.11 0l-3.89 2.593A1 1 0 0 1 6 18.131V5Z"></path></svg>THINK TWICE & SAVE';
            hecaptchaContainer.appendChild(hecaptchaSaveBtn);
            hecaptchaSaveBtn.addEventListener('click', function() {
                saveForm();
            });
        },
        function(){}
    );
}

function onHCaptchaExpired() {
    hecaptchaContainer = document.querySelector('.h-captcha-container');
    hecaptchaSaveBtn = hecaptchaContainer.querySelector('button');
    if(hecaptchaSaveBtn) {
        hecaptchaContainer.removeChild(hecaptchaSaveBtn);
    }
}

document.querySelector('.upload-error-close-modal').addEventListener('click', function() {
    removeLottie("upload-to-cloud-lottie");
    removeLottie("upload-to-cloud-error-lottie");
    document.querySelector('.upload-error').classList.add('hidden');
    document.querySelector('#upload-to-cloud-lottie').classList.remove('hidden');
});

function checkAndGetValueInput(container, elementId) {
    if(!container) return [false, false];

    el = container.querySelector(elementId);
    if(!el) return [false, false];

    return [el, el.value];
}
function checkAndGetValueCheckbox(container, elementId) {
    if(!container) return false;

    el = container.querySelector(elementId);
    if(!el) return false;

    return el.checked;
}
function isValidInput(value) {
    return value !== '';
}
function isURL(value) {
    var urlPattern = new RegExp('^(https?:\\/\\/)?'+ // protocol
        '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|'+ // domain name
        '((\\d{1,3}\\.){3}\\d{1,3}))'+ // OR ip (v4) address
        '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*'+ // port and path
        '(\\?[;&a-z\\d%_.~+=-]*)?'+ // query string
        '(\\#[-a-z\\d_]*)?$','i'); // fragment locator
    return urlPattern.test(value);
}
function controlElBeforeSave(container, elementId, url=false) {
    let [el, elValue] = checkAndGetValueInput(container, elementId);
    if(elValue !== false) {
        if(!url) {
            if(!isValidInput(elValue)) {
                el.classList.add('border-error');
                el.addEventListener('focus', function() {
                    el.classList.remove('border-error');
                });
                return [el, null];
            } else {
                el.classList.remove('border-error');
                return [null, elValue];
            }
        } else {
            if(!isURL(elValue)) {
                el.classList.add('border-error');
                el.addEventListener('focus', function() {
                    el.classList.remove('border-error');
                });
                return [el, null];
            } else {
                el.classList.remove('border-error');
                return [null, elValue];
            }
        }
    }
    return [null, null];
}

function saveForm() {
    let firstEl = null;
    let el = null;
    let elValue = null;
    let result = null;
    let proxy_settings = [];
    let webhooks = [];

    let app = apps[0];
    app['auto_restart_value'] = checkAndGetValueCheckbox(document, '#app-settings-autoRestart');

    /** App settings **/
    result = controlElBeforeSave(document, '#app-settings-blackList', false);
    el = result[0];
    elValue = result[1];
    app['black_list'] = elValue === null ? app['black_list'] : elValue;
    firstEl = firstEl === null ? el : firstEl;

    result = controlElBeforeSave(document, '#app-settings-loopTime', false);
    el = result[0];
    elValue = result[1];
    app['loop_time'] = elValue === null ? app['loop_time'] : elValue;
    firstEl = firstEl === null ? el : firstEl;

    result = controlElBeforeSave(document, '#app-settings-amazonURL', true);
    el = result[0];
    elValue = result[1];
    app['amazon_base_url'] = elValue === null ? app['amazon_base_url'] : elValue;
    firstEl = firstEl === null ? el : firstEl;

    result = controlElBeforeSave(document, '#app-settings-compareValue', false);
    el = result[0];
    elValue = result[1];
    app['compare_value'] = elValue === null ? app['compare_value'] : elValue;
    firstEl = firstEl === null ? el : firstEl;
    /** end **/


    /** Proxy settings **/
    const proxySubContainers = document.querySelectorAll('.proxy-settings-subContainer');
    if(proxySubContainers) {
        proxySubContainers.forEach((container) => {
            let proxy_setting = {};
            result = controlElBeforeSave(container, '.proxy-settings-serverName', false);
            el = result[0];
            elValue = result[1];
            proxy_setting['server_name'] = elValue === null ? proxy_setting['server_name'] : elValue;
            firstEl = firstEl === null ? el : firstEl;
            
            result = controlElBeforeSave(container, '.proxy-settings-apiKey', false);
            el = result[0];
            elValue = result[1];
            proxy_setting['api_key'] = elValue === null ? proxy_setting['api_key'] : elValue;
            firstEl = firstEl === null ? el : firstEl;
            
            result = controlElBeforeSave(container, '.proxy-settings-requestLimit', false);
            el = result[0];
            elValue = result[1];
            proxy_setting['concurrent_requests_limit'] = elValue === null ? proxy_setting['concurrent_requests_limit'] : elValue;
            firstEl = firstEl === null ? el : firstEl;
            
            result = controlElBeforeSave(container, '.proxy-settings-timeout', false);
            el = result[0];
            elValue = result[1];
            proxy_setting['timeout_value'] = elValue === null ? proxy_setting['timeout_value'] : elValue;
            firstEl = firstEl === null ? el : firstEl;

            proxy_settings.push(proxy_setting);
        });
        app['proxy_settings'] = proxy_settings;
    }
    /** end **/

    /** Amazon products **/
    if(amazonProducts.length > 0) {
        app['amazon_products'] = amazonProducts;
    } else {
        amazon_products_container = document.querySelector('.outer-form-amazon-products');
        amazon_products_view_table = amazon_products_container.querySelector('#amazon-products-view-table');
        amazon_products_view_table.style.removeProperty('display');
        amazon_products_view_table.innerHTML = '<span class="text-error font-bold animate-pulse">There is a no data available right now</span>';
        firstEl = amazon_products_container;
    }
    /** end **/

    /** Webhook designer **/
    const webhookContainers = document.querySelectorAll('#discord-manage-webhook-container');
    if(webhookContainers) {
        webhookContainers.forEach(webhookContainer => {
            const webhookSubContainers = webhookContainer.querySelectorAll('.discord-manage-webhook-subContainer');
            if(webhookSubContainers) {
                webhookSubContainers.forEach(container => {
                    let webhook = {};
    
                    result = controlElBeforeSave(container, '#discord-manage-webhook-name', false);
                    el = result[0];
                    elValue = result[1];
                    webhook['name'] = elValue === null ? webhook['name'] : elValue;
                    firstEl = firstEl === null ? el : firstEl;

                    let config = {};
                    result = controlElBeforeSave(container, '#discord-manage-webhook-url-value', true);
                    el = result[0];
                    elValue = result[1];
                    config['webhook'] = elValue === null ? config['webhook'] : elValue;
                    firstEl = firstEl === null ? el : firstEl;
    
                    let author = {};
                    result = controlElBeforeSave(container, '#discord-manage-author', false);
                    el = result[0];
                    elValue = result[1];
                    author['name'] = elValue === null ? author['name'] : elValue;
                    firstEl = firstEl === null ? el : firstEl;
                    result = controlElBeforeSave(container, '#discord-manage-author-icon-url', false);
                    el = result[0];
                    elValue = result[1];
                    author['icon_url'] = elValue === null ? author['icon_url'] : elValue;
                    firstEl = firstEl === null ? el : firstEl;
                    config['author'] = author;
    
                    result = controlElBeforeSave(container, '#discord-manage-description', false);
                    el = result[0];
                    elValue = result[1];
                    config['description'] = elValue === null ? config['description'] : elValue;
                    firstEl = firstEl === null ? el : firstEl;
                    result = controlElBeforeSave(container, '#discord-manage-description-url', false);
                    el = result[0];
                    elValue = result[1];
                    config['description_url'] = elValue === null ? config['description_url'] : elValue;
                    firstEl = firstEl === null ? el : firstEl;
    
                    config['color'] = '0x5CDBF0';
                    config['timestamp'] = 'now';
    
                    result = controlElBeforeSave(container, '#discord-manage-thumbnail-url', false);
                    el = result[0];
                    elValue = result[1];
                    config['thumbnail_url'] = elValue === null ? config['thumbnail_url'] : elValue;
                    // firstEl = firstEl === null ? el : firstEl;
    
                    result = controlElBeforeSave(container, '#discord-manage-image-url', false);
                    el = result[0];
                    elValue = result[1];
                    config['image_url'] = elValue === null ? config['image_url'] : elValue;
                    // firstEl = firstEl === null ? el : firstEl;
    
                    let footer = {};
                    result = controlElBeforeSave(container, '#discord-manage-footer-text', false);
                    el = result[0];
                    elValue = result[1];
                    footer['text'] = elValue === null ? footer['text'] : elValue;
                    // firstEl = firstEl === null ? el : firstEl;
                    result = controlElBeforeSave(container, '#discord-manage-footer-icon-url', false);
                    el = result[0];
                    elValue = result[1];
                    footer['icon_url'] = elValue === null ? footer['icon_url'] : elValue;
                    // firstEl = firstEl === null ? el : firstEl;
                    config['footer'] = footer;
    
                    let fields = container.querySelector('#discord-manage-fields').childElementCount / 2;
                    let fieldValues = [];
                    for(let i = 1; i <= fields; i++) {
                        let fieldName = document.querySelector(`#discord-manage-field-name-${i}`);
                        let fieldValue = document.querySelector(`#discord-manage-field-value-${i}`);
    
                        if(fieldName && fieldValue) {
                            fieldValues.push({
                                name: fieldName.value,
                                value: fieldValue.value
                            });
                        }
                    }
                    config['fields'] = fieldValues;


                    webhook['config'] = config;
                    webhooks.push(webhook);
                });
            }
        });
        app['webhooks'] = webhooks;
    }
    /** end **/

    if(firstEl) {
        firstEl.scrollIntoView({ behavior: 'smooth' });
        return;
    }

    showLottie("upload-to-cloud-lottie");
    document.querySelector('#upload-to-cloud-lottie').classList.remove('hidden');
    const modal_upload = document.getElementById('modal-upload');
    modal_upload.classList.remove('hidden');
    const modal_upload_checkbox = document.getElementById('modal-upload-checkbox');
    modal_upload_checkbox.checked = true;
    setAllAutoleadsApps(
        apps,
        function() {
            modal_upload_checkbox.checked = false;
            modal_upload.classList.add('hidden');
            removeLottie("upload-to-cloud-lottie");
        },
        function() {
            removeLottie("upload-to-cloud-lottie");
            document.querySelector('#upload-to-cloud-lottie').classList.add('hidden');
            showLottie("upload-to-cloud-error-lottie");
            document.querySelector('.upload-error').classList.remove('hidden');
        }
    )
}

function getInfoFromAppFunc(app_info_label) {
    getInfoFromApp(
        function(data) {
            app_running = data['running'];
            app_running = app_running ? '🚀 running' : '💀 stoped';
            app_proceed = data['proceed_time'];
            app_stop_time = '';
            app_stop_reason = '';
            if(app_proceed) {
                let seconds = parseFloat(app_proceed);
            
                let years = Math.floor(seconds / (365*24*60*60));
                seconds -= years*365*24*60*60;
                let days = Math.floor(seconds / (24*60*60));
                seconds -= days*24*60*60;
                let hours = Math.floor(seconds / (60*60));
                seconds -= hours*60*60;
                let minutes = Math.floor(seconds / 60);
                seconds = Math.floor(seconds - minutes*60);
            
                let result = "";
            
                if (years > 0)
                    result += `${years}y: `;
                if (days > 0)
                    result += `${days}d: `;
                if (hours > 0)
                    result += `${hours}h: `;
                result += `${minutes}min`;
            
                app_proceed = result;
            }
            if (data['stop_time'])
                app_stop_time = '🛑 ' + data['stop_time'];
            if (data['stop_reason'])
                app_stop_reason = '❌ ' + data['stop_reason'];
            app_info_label.innerHTML = `<span class="run-info text-success">${app_running}</span> <span class="proceed-info text-info">🕒 ${app_proceed}</span> <span class="stop-time-info text-warning">${app_stop_time}</span> <span class="stop-reason-info text-error">${app_stop_reason}</span>`
        },
        function(error) {
            app_info_label.innerHTML = `<span class="stop-reason-info text-error">${error}</span>`
        }
    );
}

/** FORCE START **/
document.querySelector('#app-settings-forceStart').addEventListener('click', function() {
    forceStartAutoleadsApps(
        function() {},
        function() {}
    );
});
/** END **/

/** FORCE RESTART **/
let forceRestartBtn = document.querySelector('#app-settings-forceRestart');
let countdownElement = document.querySelector('.restart-passive-counting');

forceRestartBtn.addEventListener('click', function() {
    forceRestartAutoleadsApps(
        function() {
            forceRestartBtnSet(forceRestartBtn, countdownElement);
        },
        function() {
            forceRestartBtn.classList.remove('cursor-not-allowed');
            forceRestartBtn.removeAttribute('disabled');
            forceRestartBtn.querySelector('.restart-active').classList.remove('hidden');
            forceRestartBtn.querySelector('.restart-passive').classList.add('hidden');
        }
    )
});

function forceRestartBtnSet(forceRestartBtn, countdownElement) {
    let countdown = 30;
    localStorage.setItem('countdown_start', new Date().getTime());
    localStorage.setItem('countdown', countdown);
    
    forceRestartBtn.classList.add('cursor-not-allowed');
    forceRestartBtn.setAttribute('disabled', 'disabled');
    forceRestartBtn.querySelector('.restart-active').classList.add('hidden');
    forceRestartBtn.querySelector('.restart-passive').classList.remove('hidden');
    countdownElement.innerHTML = `Wait ${countdown} sec..`;

    forceRestartBtnInterval(forceRestartBtn, countdownElement);
}

function forceRestartBtnReload(forceRestartBtn, countdownElement) {
    let countdownStart = localStorage.getItem('countdown_start');
    let countdown = localStorage.getItem('countdown');
    if (countdownStart && countdown > 0) {

        forceRestartBtn.classList.add('cursor-not-allowed');
        forceRestartBtn.setAttribute('disabled', 'disabled');
        forceRestartBtn.querySelector('.restart-active').classList.add('hidden');
        forceRestartBtn.querySelector('.restart-passive').classList.remove('hidden');

        forceRestartBtnInterval(forceRestartBtn, countdownElement);
    }
}

function forceRestartBtnInterval(forceRestartBtn, countdownElement) {
    let countdownInterval = setInterval(() => {
        let currentTime = new Date().getTime();
        let countdownStart = localStorage.getItem('countdown_start');
        let countdown = localStorage.getItem('countdown');
    
        let elapsedSeconds = Math.floor((currentTime - countdownStart) / 1000);
    
        let remainingSeconds = countdown - elapsedSeconds;
    
        if (remainingSeconds <= 0) {
            clearInterval(countdownInterval);
            remainingSeconds = 0;
            forceRestartBtn.classList.remove('cursor-not-allowed');
            forceRestartBtn.removeAttribute('disabled');
            forceRestartBtn.querySelector('.restart-active').classList.remove('hidden');
            forceRestartBtn.querySelector('.restart-passive').classList.add('hidden');
        }
        
        countdownElement.innerHTML = `Wait ${remainingSeconds} sec..`;
    }, 1000);
}

forceRestartBtnReload(forceRestartBtn, countdownElement);
/** END **/

function checkAndProceedInput(data, key, container, elementId) {
    if(key in data) {
        const element = container.querySelector(elementId);
        if(element) {
            element.value = data[key];
            return element;
        }
    }
}

function checkAndProceedCheckbox(data, key, container, elementId) {
    if(key in data) {
        const element = container.querySelector(elementId);
        if(element) {
            element.checked = data[key];
            return element;
        }
    }
}

function getAll() {
    getAllAutoleadsApps(
        function(data) {
            if(data.success) {
                try {
                    apps = data.data;
                    apps.forEach(function(app) {
                        checkAndProceedInput(app, 'black_list', document, '#app-settings-blackList');
                        checkAndProceedInput(app, 'loop_time', document, '#app-settings-loopTime');
                        checkAndProceedInput(app, 'amazon_base_url', document, '#app-settings-amazonURL');
                        checkAndProceedInput(app, 'compare_value', document, '#app-settings-compareValue');
                        checkAndProceedCheckbox(app, 'auto_restart_value', document, '#app-settings-autoRestart');
                        
                        if('proxy_settings' in app) {
                            newBtn = document.getElementById('proxy-settings-add-btn');
                            proxyContainer = document.getElementById('proxy-settings-container');
                            app['proxy_settings'].forEach((proxy, index) => {
                                newBtn.click();
                                proxySubContainer = proxyContainer.querySelectorAll('.proxy-settings-subContainer')[index];
                                checkAndProceedInput(proxy, 'server_name', proxySubContainer, '.proxy-settings-serverName');
                                checkAndProceedInput(proxy, 'api_key', proxySubContainer, '.proxy-settings-apiKey');
                                checkAndProceedInput(proxy, 'concurrent_requests_limit', proxySubContainer, '.proxy-settings-requestLimit');
                                checkAndProceedInput(proxy, 'timeout_value', proxySubContainer, '.proxy-settings-timeout');
                            });
                        }

                        if('amazon_products' in app) {
                            table = document.querySelector('#amazon-products-view-table');
                            progressBar = document.querySelector('#amazon-products-view-table-progress');
                            amazonProducts = app['amazon_products'];
                            if(amazonProducts.length > 0) {
                                renderTable(amazonProducts, table, progressBar, 1);
                            }
                        }

                        if('webhooks' in app) {
                            // newBtn = document.getElementById('discord-manage-webhook-add-btn');
                            webhookContainer = document.getElementById('discord-manage-webhook-container');
                            if(webhookContainer) {
                                app['webhooks'].forEach((webhook, index) => {
                                    // newBtn.click();
                                    webhookSubContainer = webhookContainer.querySelectorAll('.discord-manage-webhook-subContainer')[index];
                                    checkAndProceedInput(webhook, 'name', webhookSubContainer, '#discord-manage-webhook-name');
                                    if('config' in webhook) {
                                        config = webhook['config'];
                                        el = checkAndProceedInput(config, 'webhook', webhookContainer, '#discord-manage-webhook-url-value');
                                        applyInputChanges(el);
    
                                        if('author' in config) {
                                            el = checkAndProceedInput(config['author'], 'name', webhookContainer, '#discord-manage-author');
                                            applyInputChanges(el);
                                            el = checkAndProceedInput(config['author'], 'icon_url', webhookContainer, '#discord-manage-author-icon-url');
                                            applyInputChanges(el);
                                        }
    
                                        el = checkAndProceedInput(config, 'description', webhookContainer, '#discord-manage-description');
                                        applyInputChanges(el);
                                        el = checkAndProceedInput(config, 'description_url', webhookContainer, '#discord-manage-description-url');
                                        applyInputChanges(el);
    
                                        el = checkAndProceedInput(config, 'thumbnail_url', webhookContainer, '#discord-manage-thumbnail-url');
                                        applyInputChanges(el);
                                        el = checkAndProceedInput(config, 'image_url', webhookContainer, '#discord-manage-image-url');
                                        applyInputChanges(el);
    
                                        if('footer' in config) {
                                            el = checkAndProceedInput(config['footer'], 'text', webhookContainer, '#discord-manage-footer-text');
                                            applyInputChanges(el);
                                            el = checkAndProceedInput(config['footer'], 'icon_url', webhookContainer, '#discord-manage-footer-icon-url');
                                            applyInputChanges(el);
                                        }
    
                                        if('fields' in config) {
                                            addFieldBtn = document.getElementById('discord-manage-add-field');
                                            webhookContainer.querySelector('#discord-manage-fields').innerHTML = '';
                                            webhookContainer.querySelector('#webhook-preview-field-container').innerHTML = '';
                                            config['fields'].forEach((field, index) => {
                                                addFieldBtn.click();
                                                el = checkAndProceedInput(field, 'name', webhookContainer, `#discord-manage-field-name-${index+1}`);
                                                applyInputChanges(el);
                                                el = checkAndProceedInput(field, 'value', webhookContainer, `#discord-manage-field-value-${index+1}`);
                                                applyInputChanges(el);
                                            });
                                        }
                                    }
                                });
                            }
                        }
                    });
                } catch (error) {
                    showToast('error', `Download page data error: ${error}`);
                }
            } else {
                showToast('error', data.error);
            }
        },
        function() {/* Not completed codes here */}
    );
}

// window.onload = function() {
//     infoLabelFunc();
//     getAll();
// }


outerFormEl = document.querySelectorAll('.outer-form');
outerFormEl.forEach(item => {
    item.addEventListener('click', function() {
        outerFormEl.forEach(item => {
            item.classList.remove('border-opacity-50');
            item.querySelector('div span').classList.remove('text-success', 'animate-pulse');
        });

        this.classList.add('border-opacity-50');
        this.querySelector('div span').classList.add('text-success', 'animate-pulse');
    });
});

document.querySelector('#amazon-products-view-checkBox').addEventListener('change', function() {
    if(this.checked) {
        document.querySelector('#amazon-products-add-panel').classList.add('hidden');
        document.querySelector('#amazon-products-view-panel').classList.remove('hidden');
    } else {
        document.querySelector('#amazon-products-add-panel').classList.remove('hidden');
        document.querySelector('#amazon-products-view-panel').classList.add('hidden');
    }
});

document.querySelectorAll('.proxy-settings-remove-btn').forEach(function(btn) {
    btn.addEventListener('click', function() {
        if(this.parentNode.parentNode.parentNode) {
            this.parentNode.parentNode.parentNode.removeChild(this.parentNode.parentNode);
        }
    });
});

document.getElementById('proxy-settings-add-btn').addEventListener('click', function() {
    container = document.getElementById('proxy-settings-container');
    var proxyNewDiv = document.createElement('div');
    proxyNewDiv.classList.add('form-control', 'px-2', 'w-fit', 'proxy-settings-subContainer');
    proxyNewDiv.innerHTML = '<label class="input-group input-group-sm w-fit flex flex-wrap flex-row space-y-1"><div class="hidden"></div><span class="rounded-l-lg">server:</span><select class="select select-bordered select-sm focus:outline-none text-sm font-normal proxy-settings-serverName"><option selected="selected">scrapedo</option><option>scraperapi</option></select><span>api key:</span><input type="password" placeholder="api key" class="input input-bordered input-sm focus:outline-none focus:placeholder:opacity-0 w-auto proxy-settings-apiKey" required><span>c.r. limit:</span><input type="number" class="input input-bordered input-sm focus:outline-none focus:placeholder:opacity-0 w-[5rem] proxy-settings-requestLimit" value="5" required><span>timeout:</span><input type="number" class="input input-bordered input-sm focus:outline-none focus:placeholder:opacity-0 w-[5rem] proxy-settings-timeout" value="30" required><a class="bt btn-sm btn-error border text-xl font-bold cursor-pointer proxy-settings-remove-btn">-</a></label>';
    container.appendChild(proxyNewDiv);

    document.querySelectorAll('.proxy-settings-remove-btn').forEach(function(btn) {
        btn.addEventListener('click', function() {
            if(this.parentNode.parentNode.parentNode) {
                this.parentNode.parentNode.parentNode.removeChild(this.parentNode.parentNode);
            }
        });
    });
});


document.getElementById('discord-manage-add-field').addEventListener('click', function(e) {
    var fieldCount = document.getElementById('discord-manage-fields').querySelectorAll('label').length / 2 + 1;
    
    var newFieldNameLabel = document.createElement('label');
    newFieldNameLabel.className = 'cursor-pointer label';
    newFieldNameLabel.innerHTML = '<span class="label-text whitespace-nowrap">field-name:&nbsp</span><input type="text" class="input input-xs focus:outline-none w-full" id="discord-manage-field-name-' + fieldCount + '" name="discord-manage-field-name-' + fieldCount + '"/>';
    newFieldNameLabel.style = 'margin-left: 0;'

    var newFieldValueLabel = document.createElement('label');
    newFieldValueLabel.className = 'cursor-pointer label';
    newFieldValueLabel.innerHTML = '<span class="label-text whitespace-nowrap">field-value:&nbsp</span><input type="text" class="input input-xs focus:outline-none w-full" id="discord-manage-field-value-' + fieldCount + '" name="discord-manage-field-value-' + fieldCount + '"/>';

    var fieldsDiv = document.getElementById('discord-manage-fields');
    fieldsDiv.appendChild(newFieldNameLabel);
    fieldsDiv.appendChild(newFieldValueLabel);

    var webhookFieldContainer = document.querySelector('#discord-container #webhook-preview-field-container');
    var newWebhookDiv = document.createElement('div');
    newWebhookDiv.className = 'grid justify-start text-[#f2f3f5] w-fit';
    newWebhookDiv.innerHTML = `<span class="max-w-64 text-[14px] text-[#060607] dark:text-[#f2f3f5] font-bold whitespace-normal text-ellipsis overflow-hidden" id="webhook-field-name-${fieldCount}">field-name-${fieldCount}</span><span class="text-[14px] text-[#060607] dark:text-[#f2f3f5] font-light whitespace-normal text-ellipsis overflow-hidden" id="webhook-field-value-${fieldCount}">field-value-${fieldCount}</span>`;
    webhookFieldContainer.appendChild(newWebhookDiv);

    idToPreviewId[`discord-manage-field-name-${fieldCount}`] = `#webhook-field-name-${fieldCount}`;
    idToPreviewId[`discord-manage-field-value-${fieldCount}`] = `#webhook-field-value-${fieldCount}`;
});

document.getElementById('discord-manage-remove-field').addEventListener('click', function(e) {
    var fieldCount = document.getElementById('discord-manage-fields').querySelectorAll('label').length / 2;

    if(fieldCount === 0) return;

    var fieldNameLabel = document.getElementById('discord-manage-field-name-' + fieldCount).parentNode;
    var fieldValueLabel = document.getElementById('discord-manage-field-value-' + fieldCount).parentNode;
    fieldNameLabel.parentNode.removeChild(fieldNameLabel);
    fieldValueLabel.parentNode.removeChild(fieldValueLabel);

    var webhookFieldContainer = document.querySelector('#discord-container #webhook-preview-field-container');
    var webhookField = document.getElementById('webhook-field-name-' + fieldCount).parentNode;
    webhookFieldContainer.removeChild(webhookField);

    delete idToPreviewId[`discord-manage-field-name-${fieldCount}`];
    delete idToPreviewId[`discord-manage-field-value-${fieldCount}`];
});

const dicord_manager_container = document.querySelector('#discord-manage');

dicord_manager_container.addEventListener('focus', function(e) {
    if (e.target && e.target.tagName === 'INPUT') {
        lastFocusedInput = e.target;
    }
}, true);

dicord_manager_container.addEventListener('input', function(e) {
    if (e.target && e.target.tagName === 'INPUT') {
        applyInputChanges(e.target);
    }
});


document.querySelector('#discord-manage').addEventListener('input', function(e) {
    applyInputChanges(e.target);
});

document.querySelectorAll('#discord-custom-tags-container .badge').forEach(function(badge) {
    badge.addEventListener('click', function() {
        var badgeValue = this.textContent;

        if (lastFocusedInput) {
            insertAtCaret(lastFocusedInput, badgeValue);
            applyInputChanges(lastFocusedInput);
        }
    });
});

/** UPLOAD XLSX FILES TO SERVER FUNCTIONS **/
function sendFilesToServer(attachments) {
    const url = '/autoleads/creator/upload-product-files';
    const headers = {};
    const formData = new FormData();

    attachments.forEach(attachment => {
      formData.append('attachment', attachment);
    });
    
    requestsPOST(
      url, 
      headers,
      formData,
      function(error, data, timeDiff) {
        if (error) {
            showToast('error', error);
        } else {
            if(data.success){
              showToast('success', timeDiff, 700);
              if(data.products.length !== 0) {
                table = document.querySelector('#amazon-products-add-table');
                progressBar = document.querySelector('#amazon-products-add-table-progress');
                renderTable(data.products, table, progressBar, 1);
                table.scrollIntoView({ behavior: 'smooth' });
              } else {
                showToast('warning', 'In files can not find any ASIN column');
              }
            } else {
              showToast('error', data.error);
            }
        }
      },
      function(progress) {/* NOTE: Fetch API doesn't support progress updates as of September 2021. */},
      true
    );
}

/** CREATE TABLE FUNCTIONS **/
const itemsPerPage = 25; 
showLottie('loading-files-lottie');

function removeDuplicatedData(data) {
    let uniqueData = Array.from(new Map(data.map(item => [item["ASIN"], item])).values());

    uniqueData.forEach(item => {
        if (item.UPCS !== null) {
          let upcsArray = item.UPCS.split(", ");
          let uniqueUpcsArray = Array.from(new Set(upcsArray));
          item.UPCS = uniqueUpcsArray.join(", ");
        }
      });

    return uniqueData;
}

function renderTable(data, table, progressBar, currentPage){
    data = removeDuplicatedData(data);

    idPrefix = table.getAttribute('idPrefix');
    const product_table = createBaseTable(table, progressBar, idPrefix);
    const product_table_body = document.getElementById(`${idPrefix}-product-table-body`);
    const eraseButton = document.getElementById(`${idPrefix}-product-table-erase-btn`);
    const deleteButton = document.getElementById(`${idPrefix}-product-table-delete-btn`);
    const saveButton = document.getElementById(`${idPrefix}-product-table-save-btn`);
    if(idPrefix == 'add') {
        saveButton.innerHTML = 'Import';
    } else {
        saveButton.parentNode.removeChild(saveButton);
    }

    headerCount = createTableHeader(data, product_table, idPrefix);
    currentPage = handlePagination(data, table, currentPage, table, progressBar, headerCount, idPrefix);
    createTableBody(data, currentPage, product_table_body, idPrefix);
    handleRowSelection(data, table, progressBar, currentPage, eraseButton, deleteButton, saveButton, idPrefix);
}

function createBaseTable(table, progressBar, idPrefix){
    table.innerHTML = '';
    table.style.display = 'none';
    progressBar.style.removeProperty('display');

    table.innerHTML = `<div class="overflow-auto bg-base-200 rounded-lg transform transition-all ease-in duration-200">
    <table class="min-w-full" id="${idPrefix}-product-table">
    <thead class="bg-base-300 rounded-t-lg"></thead>
    <tbody class="divide-y divide-gray-700" id="${idPrefix}-product-table-body"></tbody>
    <tfoot>
    <tr><td colspan="5" class="bg-base-300 px-6 py-4 rounded-b-lg text-sm" id="${idPrefix}-product-table-foot">
    Showing _ to _ of _ entries</td></tr></tfoot></table></div>
    <div class="flex items-center justify-end gap-x-4 pr-2">
    <button class="btn btn-sm btn-outline text-xs btn-warning normal-case" id="${idPrefix}-product-table-erase-btn">Erase Empty UPCs</button>
    <button class="btn btn-sm btn-outline text-xs btn-error normal-case" id="${idPrefix}-product-table-delete-btn" disabled="disabled">Delete</button>
    <button class="btn btn-sm btn-outline text-xs btn-accent normal-case" id="${idPrefix}-product-table-save-btn">Save</button></div>`;

    return document.getElementById(`${idPrefix}-product-table`);
}

function createTableHeader(data, product_table, idPrefix){
    let headerCount = 0;
    if (data != []) {
        const headerRow = document.createElement("tr");
        headerRow.innerHTML = `<th scope="col" class="px-6 py-4 text-left text-xs font-medium uppercase tracking-wider"><label class="inline-flex items-center"><input type="checkbox" class="checkbox checkbox-xs" id="${idPrefix}-product-table-checkbox-all"></label></th>`;
        const headerKeys = Object.keys(data[0]);
        headerCount = headerKeys.length + 1;

        for (let key of headerKeys) {
            const th = document.createElement("th");
            th.scope = "col";
            th.className = "px-6 py-3 text-left text-xs font-medium uppercase tracking-wider";
            th.textContent = key.replace(/_/g, ' ');
            headerRow.appendChild(th);
        }

        product_table.querySelector("thead").appendChild(headerRow);
    } 
    return headerCount;
}

function createTableBody(data, currentPage, product_table_body, idPrefix){
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const rows = data.slice(startIndex, endIndex);
    rows.forEach((data, index) => {
        createTableRow(data, product_table_body, idPrefix);
    });
}

function createTableRow(data, product_table_body, idPrefix){
    // Create the table row
    const tr = document.createElement('tr');
    tr.id = `${idPrefix}-table-tr`;
    tr.classList.add('transition-all', 'duration-200', 'hover:bg-base-100');
  
    // Create the checkbox cell
    const tdCheckbox = document.createElement('td');
    tdCheckbox.classList.add('px-6', 'py-1', 'whitespace-nowrap', 'text-xs');
    const label = document.createElement('label');
    label.classList.add('inline-flex', 'items-center');
    const checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.id = 'dataCheckboxes';
    checkbox.classList.add('checkbox', 'checkbox-xs');
    label.appendChild(checkbox);
    tdCheckbox.appendChild(label);
    tr.appendChild(tdCheckbox);
  
    const headerKeys = Object.keys(data);

    headerKeys.forEach(key => {
        if(key !== 'status'){
            const td = document.createElement("td");
            td.classList.add("px-6", "py-1", "truncate", "whitespace-nowrap", "text-xs", 'max-w-[16rem]', 'overflow-hidden');
            td.innerHTML = data[key];
            tr.appendChild(td);
        } else {
            const tdStatus = document.createElement('td');
            tdStatus.classList.add('px-6', 'py-1', 'truncate', 'whitespace-nowrap', 'text-xs');
            const labelStatus = document.createElement('label');
            labelStatus.classList.add('swap', 'swap-rotate');
            const checkboxStatus = document.createElement('input');
            checkboxStatus.type = 'checkbox';
            checkboxStatus.id = 'statusCheckboxes';
            checkboxStatus.checked = data.status;
            const divOn = document.createElement('div');
            divOn.classList.add('swap-on', 'text-success', 'text-xs', 'font-bold');
            divOn.textContent = 'ACTIVE';
            const divOff = document.createElement('div');
            divOff.classList.add('swap-off', 'text-error', 'text-xs', 'font-bold');
            divOff.textContent = 'PASSIVE';
            labelStatus.appendChild(checkboxStatus);
            labelStatus.appendChild(divOn);
            labelStatus.appendChild(divOff);
            tdStatus.appendChild(labelStatus);
            tr.appendChild(tdStatus);

            checkboxStatus.addEventListener('change', function () {
                data['status'] = checkboxStatus.checked ? true : false;
            });
        }
    });

    product_table_body.appendChild(tr);
}

function handlePagination(data, table, currentPage, table, progressBar, headerCount, idPrefix){
    const product_table_foot = document.getElementById(`${idPrefix}-product-table-foot`);
    const endEntry = Math.min(currentPage * itemsPerPage, data.length);
    currentPage = endEntry == data.length ? Math.ceil(data.length / itemsPerPage) : currentPage;
    const startEntry = (currentPage - 1) * itemsPerPage + 1;

    const totalPages = Math.ceil(data.length / itemsPerPage);
    const pageButtonsContainer = document.createElement('div');
    pageButtonsContainer.classList.add('btn-group', 'btn-group-horizontal');

    let startPage = Math.max(1, currentPage - 5);
    let endPage = Math.min(totalPages, currentPage + 4);

    if (currentPage <= 6) {
        endPage = Math.min(10, totalPages);
    }

    if (totalPages - currentPage < 5 && totalPages >= 10) {
        startPage = totalPages - 9;
    }

    for (let i = startPage; i <= endPage; i++) {
        const pageButton = document.createElement('button');
        pageButton.classList.add('btn', 'btn-xs', 'w-[1.75rem]');
        pageButton.innerHTML = i;

        if (i === currentPage) {
            pageButton.classList.add('btn-active');
        }

        pageButton.addEventListener('click', function () {
            currentPage = i;
            table.scrollIntoView({ behavior: 'smooth' });
            renderTable(data, table, progressBar, currentPage);
        });

        pageButtonsContainer.appendChild(pageButton);
    }

    product_table_foot.innerHTML = `<div class="container mx-auto flex items-center justify-between text-sm truncate whitespace-nowrap"><div>Showing ${startEntry} to ${endEntry} of <span class="font-bold">${data.length}</span> entries</div></div>`;
    product_table_foot.querySelector('.container').appendChild(pageButtonsContainer);
    product_table_foot.setAttribute("colspan", headerCount);

    return currentPage;
}

function handleRowSelection(data, table, progressBar, currentPage, eraseButton, deleteButton, saveButton, idPrefix){
    const selectAllCheckbox = document.getElementById(`${idPrefix}-product-table-checkbox-all`);
    const dataCheckboxes = document.querySelectorAll(`#${idPrefix}-product-table-body input[id="dataCheckboxes"]`);
    selectAllCheckbox.addEventListener('change', function() {
        handleSelectAll(dataCheckboxes, deleteButton, selectAllCheckbox, idPrefix);
    });

    dataCheckboxes.forEach(function(dataCheckbox) {
        dataCheckbox.addEventListener('change', function() {
            handleCheckboxChange(dataCheckboxes, deleteButton, selectAllCheckbox, idPrefix);
        });
    });

    const rows = document.querySelectorAll(`#${idPrefix}-table-tr`);
    eraseButton.addEventListener('click', function() {
        handleErase(data, table, progressBar, currentPage, idPrefix);
    });

    deleteButton.addEventListener('click', function() {
        handleDelete(data, table, progressBar, dataCheckboxes, currentPage, idPrefix);
    });

    saveButton.addEventListener('click', function() {
        handleSave(table, progressBar, data);
    });

    progressBar.style.display = 'none';
    table.style.removeProperty('display');
}

function handleSelectAll(dataCheckboxes, deleteButton, selectAllCheckbox, idPrefix){
    dataCheckboxes.forEach(function(dataCheckbox) {
        dataCheckbox.checked = selectAllCheckbox.checked;
    });

    if (document.querySelector(`#${idPrefix}-product-table-body input[id="dataCheckboxes"]:checked`)) {
        deleteButton.disabled = false;
    } else {
        deleteButton.disabled = true;
    }
}

function handleCheckboxChange(dataCheckboxes, deleteButton, selectAllCheckbox, idPrefix){
    dataCheckboxes.forEach(function() {
        if (document.querySelector(`#${idPrefix}-product-table-body input[id="dataCheckboxes"]:checked`)) {
            deleteButton.disabled = false;
        } else {
            deleteButton.disabled = true;
        }

        if (document.querySelectorAll(`#${idPrefix}-product-table-body input[id="dataCheckboxes"]`).length === document.querySelectorAll(`#${idPrefix}-product-table-body input[id="dataCheckboxes"]:checked`).length) {
            selectAllCheckbox.checked = true;
        } else {
            selectAllCheckbox.checked = false;
        }
    });
}

function handleErase(data, product_table, progressBar, currentPage, idPrefix) {
    data = data.filter(function(item) {
        return item['UPCS'] !== '' && item['UPCS'] !== null;
    });
    amazonProducts = idPrefix === 'view' ? data : amazonProducts;
    product_table.scrollIntoView({ behavior: 'smooth' });
    renderTable(data, product_table, progressBar, currentPage);
}

function handleDelete(data, product_table, progressBar, dataCheckboxes, currentPage, idPrefix){
    if (document.querySelectorAll(`#${idPrefix}-product-table-body input[id="dataCheckboxes"]`).length === document.querySelectorAll(`#${idPrefix}-product-table-body input[id="dataCheckboxes"]:checked`).length){
        handleRemoveTable(product_table, progressBar);
        data.length = 0;
        amazonProducts = idPrefix === 'view' ? data : amazonProducts;
    } else {
        const checkedIndexes = [];
        dataCheckboxes.forEach(function(dataCheckbox, index) {
            if(dataCheckbox.checked){
                checkedIndexes.push(index);
            }
        });
        const newData = data.filter(function(data, index) {
            return !checkedIndexes.includes(index);
        });
        data = newData;
        amazonProducts = idPrefix === 'view' ? data : amazonProducts;
        product_table.scrollIntoView({ behavior: 'smooth' });
        renderTable(amazonProducts, product_table, progressBar, currentPage);
    }
}

function handleSave(table, progressBar, data){
    document.querySelector('#amazon-products-add-panel').classList.add('hidden');
    document.querySelector('#amazon-products-view-panel').classList.remove('hidden');
    document.querySelector('#amazon-products-view-checkBox').checked = true;
    document.querySelector('#amazon-products-view-checkBox').scrollIntoView({ behavior: 'smooth' });

    success_lottie.style.display = 'none';
    dropZone_base.style.removeProperty('display');
    dropZone.classList.remove('border-success');
    dropZone_hasFile = false;
    handleRemoveTable(table, progressBar);

    table = document.querySelector('#amazon-products-view-table');
    progressBar = document.querySelector('#amazon-products-view-table-progress');
    amazonProducts.push(...data);
    renderTable(amazonProducts, table, progressBar, 1);
}

function handleRemoveTable(table, progressBar) {
    table.innerHTML = '';
    table.style.display = 'none';
    progressBar.style.display = 'none';
    document.querySelector('#amazon-products-view-checkBox').scrollIntoView({ behavior: 'smooth' });
}


infoLabelFunc();
getAll();


let webSocket = WebSocketHandler(
    'ws://localhost:8000/ws/autoleads-creator/',
    function(event) {
        console.log('Message from server: ', event.data);
        let response = JSON.parse(event.data);
        if (response.type === 'all_data') {
           console.log(response.data)
        }
    },
    function(event) {
        console.log('WebSocket connection established');
        let message = {
            type: 'get_all',
            data: {}
        };
        webSocket.send(message); // Use the returned 'send' method
    }
    // You can add more callbacks for 'close' and 'error' events if needed
);

// webSocket.send(JSON.stringify({
//     action: 'get_all',
// }));