showLottie('create-new-form-lottie');

// const default_template_view_content = `<div class="group relative w-56 h-42 cursor-pointer overflow-hidden border-4 border-base-300/50 rounded-md shadow-lg" onclick="startEditing(event)"><iframe class="relative top-0 left-0 w-[400%] h-[400%] transform scale-[.25] rounded-2xl origin-top-left transition-all duration-300 ease blur-md group-hover:blur-none" srcdoc=${template.template}></iframe><div class="absolute top-0 left-0 w-full h-full bg-base-100 bg-opacity-50 flex flex-col justify-end p-3"><h2 class="text-accent-content text-lg font-bold text-left">${template.name}</h2><a class="btn btn-xs btn-primary text-white max-w-[8rem] overflow-clip static items-center px-2 transition-all duration-300 ease-linear w-6 transform group-hover:w-full rounded-3xl group-hover:rounded-sm"><span class="absolute right-7 truncate">Start Editing</span><svg xmlns="http://www.w3.org/2000/svg" class="absolute right-[2px] w-3 h-3" viewBox="0 0 20 20" id="arrow"><path fill="currentColor" fill-rule="evenodd" d="M.366 19.708c.405.39 1.06.39 1.464 0l8.563-8.264a1.95 1.95 0 0 0 0-2.827L1.768.292A1.063 1.063 0 0 0 .314.282a.976.976 0 0 0-.011 1.425l7.894 7.617a.975.975 0 0 1 0 1.414L.366 18.295a.974.974 0 0 0 0 1.413"></path></svg></a></div></div>`;
// const default_quil_base_html = '<!DOCTYPE html><html><head><link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet"><style></style></head><body><div id="content"></div></body></html>';

window.onload = function() {
    getAllTemplates(
        successCallback,
        function () {}
    );
}

function successCallback(templates) {
    let container = document.getElementById('template-container');
  
    templates.forEach(template => {
      let templateDiv = document.createElement('div');
  
      templateDiv.className = "group relative w-56 h-42 cursor-pointer overflow-hidden border-4 border-base-300/50 rounded-md shadow-lg";
      templateDiv.setAttribute("onclick", "startEditing(event)");
      templateDiv.setAttribute("name", "custom-template-container");
  
      templateDiv.innerHTML = `
        <iframe class="relative top-0 left-0 w-[400%] h-[400%] transform scale-[.25] rounded-2xl origin-top-left transition-all duration-300 ease blur-md group-hover:blur-none" srcdoc='${template.template}'></iframe>
        <div class="absolute top-0 left-0 w-full h-full bg-base-100 bg-opacity-50 flex flex-col justify-end p-3">
          <h2 class="text-accent-content text-lg font-bold text-left">${template.name}</h2>
          <a class="btn btn-xs btn-primary text-white max-w-[8rem] overflow-clip static items-center px-2 transition-all duration-300 ease-linear w-6 transform group-hover:w-full rounded-3xl group-hover:rounded-sm">
            <span class="absolute right-7 truncate">Start Editing</span>
            <svg xmlns="http://www.w3.org/2000/svg" class="absolute right-[2px] w-3 h-3" viewBox="0 0 20 20" id="arrow">
              <path fill="currentColor" fill-rule="evenodd" d="M.366 19.708c.405.39 1.06.39 1.464 0l8.563-8.264a1.95 1.95 0 0 0 0-2.827L1.768.292A1.063 1.063 0 0 0 .314.282a.976.976 0 0 0-.011 1.425l7.894 7.617a.975.975 0 0 1 0 1.414L.366 18.295a.974.974 0 0 0 0 1.413"></path>
            </svg>
          </a>
        </div>
      `;
  
      container.appendChild(templateDiv);
    });
}

function refreshTemplatePage() {
    const elements = document.getElementsByName('custom-template-container');
    elements.forEach(item => {
        item.remove();
    });
    getAllTemplates(
        successCallback,
        function () {}
    );
}

const modal_template_editor_checkbox = document.getElementById('modal-template-editor-checkbox');
const pick_list = document.getElementById('editor-pick-list');
const warning_label = document.getElementById('warning-label');
const template_name_field = document.getElementById('template-name-field');
let newContent = false;

var toolbarOptions = [
    [{ 'font': [] }],
    ['bold', 'italic', 'underline', 'strike'],
    ['blockquote', 'code-block'],
    [{ 'list': 'ordered'}, { 'list': 'bullet' }],
    [{ 'script': 'sub'}, { 'script': 'super' }],
    [{ 'indent': '-1'}, { 'indent': '+1' }],
    [{ 'direction': 'rtl' }],
    [{ 'size': ['small', false, 'large', 'huge'] }],
    [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
    [{ 'color': [] }, { 'background': [] }],
    [{ 'align': [] }],
    ['clean'],
    ['link', 'image', 'video']
];

var quill = new Quill('#editor', {
    modules: {
        toolbar: toolbarOptions
    },
    theme: 'snow'
});

const container = document.querySelector('.ql-container');

function getEmailFileNames(pickList) {
    getAllEmailNames(
      function (data) {
        pickList.innerHTML = '<option disabled selected>Pick one</option>';
        data.forEach(name => {
          if(name != 'Pick one') {
            const optionEl = document.createElement('option');
            optionEl.value = name;
            optionEl.textContent = name;
            pickList.appendChild(optionEl);
          }
        });
      },
      function () {}
    );
}

function createNew() {
    newContent = true;
    getEmailFileNames(pick_list);
    resetFieldsContainer();
    quill.setText('');
    modal_template_editor_checkbox.checked = true;
}

function startEditing(event) {
    let clickedDiv = event.currentTarget;
    let h2 = clickedDiv.querySelector('h2');
    if (!h2) {
        showToast('error', 'No data found. Please refresh page. err:h2/name')
        return;
    }
    let iframe = clickedDiv.querySelector('iframe');
    if (!iframe) {
        showToast('error', 'No data found. Please refresh page. err:iframe')
        return;
    }
    let srcdoc = iframe.getAttribute('srcdoc');
    if (!srcdoc) {
        showToast('error', 'No data found. Please refresh page. err:srcdoc')
        return;
    }
    let parser = new DOMParser();
    let doc = parser.parseFromString(srcdoc, 'text/html');
    let contentDiv = doc.getElementById('content');
    if (!contentDiv) {
        showToast('error', 'No data found. Please refresh page. err:div/content')
        return;
    }
    let quillContent = contentDiv.innerHTML;

    quill.setContents([]);
    quill.clipboard.dangerouslyPasteHTML(quillContent);
    template_name_field.value = h2.innerHTML;

    newContent = false;
    modal_template_editor_checkbox.checked = true;
    getEmailFileNames(pick_list);
}

function saveContent() {
    if (template_name_field.value.trim() === '') {
        template_name_field.classList.add('border-error', 'border-opacity-75');
        warning_label.innerHTML = 'You sould give a name for template.';
        return;
    }

    const required = checkFieldsAndUpdateStyle();
    if(!required) {
        container.style.border = 'none';
        warning_label.innerHTML = '';
        template_name_field.classList.remove('border-error', 'border-opacity-75');

        var name = template_name_field.value;
        var content = `<!DOCTYPE html><html><head><link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet"><style></style></head><body><div id="content">${quill.root.innerHTML}</div></body></html>`;

        const url = '/tools/save-template/';
        const headers = {
          'Accept': 'application/json',
        };
        const formData = new FormData();
        formData.append('name', name);
        formData.append('html_content', content);
      
        requestsPOST(
          url,
          headers,
          formData,
          function(error, data, timeDiff) {
            if (error) {
                showToast('error', error);
                warning_label.innerHTML = `${error}`;
            } else {
                if(data.success){
                    refreshTemplatePage();
                    modal_template_editor_checkbox.checked = false;
                    showToast('success', timeDiff, 700);
                } else {
                    showToast('error', data.error);
                    warning_label.innerHTML = `${data.error}`;
                }
            }
          },
          function(progress) { },
          true
        );

    } else {
        warning_label.innerHTML = 'There are unsupported fields in your text.<br>Please update the fields and try again.';
        container.style.border = 'solid'
        container.style.borderColor = 'red';
    }
}

function deleteContent() {
    if(newContent) {
        newContent = false;
        resetFieldsContainer();
        quill.setText('');
        modal_template_editor_checkbox.checked = false;
        return;
    }
    
    var name = template_name_field.value;

    const url = '/tools/delete-template/';
    const headers = {
      'Accept': 'application/json',
    };
    const formData = new FormData();
    formData.append('name', name);
  
    requestsPOST(
      url,
      headers,
      formData,
      function(error, data, timeDiff) {
        if (error) {
            showToast('error', error);
            warning_label.innerHTML = `${error}`;
        } else {
            if(data.success){
                refreshTemplatePage();
                modal_template_editor_checkbox.checked = false;
                showToast('success', timeDiff, 700);
            } else {
                showToast('error', data.error);
                warning_label.innerHTML = `${data.error}`;
            }
        }
      },
      function(progress) { },
      true
    );
}

let range = {'index':0, 'length':0};
/** BADGES **/
    function resetFieldsContainer(){
        const badgeContainer = document.getElementById("badge-container");
        const badgeDiv = badgeContainer.querySelector('#badge-div');
        badgeContainer.classList.add("hidden");
        badgeDiv.innerHTML = '';
        container.style.border = 'none';
        warning_label.innerHTML = '';
        template_name_field.classList.remove('border-error', 'border-opacity-75');
        template_name_field.value = '';
        pick_list_value = '';
    }

    function checkFieldsAndUpdateStyle() {
        const badgeContainer = document.getElementById("badge-container");
        const badgeDiv = badgeContainer.querySelector('#badge-div');
    
        const allFieldsRegex = /\{([^}]+)\}/g;
    
        const newBadgeFields = new Set(
            Array.from(badgeDiv.querySelectorAll('.badge')).map(
                (badge) => `${badge.innerText.substring(2)}`
            )
        );
    
        const contents = quill.getContents();
        let index = 0;
        let has_error_fields = false;
    
        contents.ops.forEach(op => {
            if (typeof op.insert === 'string') {
                const foundFields = op.insert.match(allFieldsRegex) || [];
    
                foundFields.forEach(field => {
                    const start = op.insert.indexOf(field);
                    const end = start + field.length;

                    const field_status  = !newBadgeFields.has(field);
                    has_error_fields |= field_status;
                    quill.formatText(index + start, end - start, {
                        'italic': field_status, 
                        'underline': field_status
                    });
                });
    
                index += op.insert.length;
            }
        });

        return has_error_fields;
    }

    pick_list.addEventListener('change', function () {
        getEmails(
        this.value,
        function(data) {

            const badgeContainer = document.getElementById("badge-container");
            const badgeDiv = badgeContainer.querySelector('#badge-div');
            const badge_fixer = '<div class="hidden"></div>';
            badgeDiv.innerHTML = badge_fixer;
        
            let badge_container_has_badge = false;

            emails = data;

            for (const field of Object.keys(data[0])) {
            if (field !== "email" && field !== "status") {
                badge_container_has_badge = true;
                const tooltip = document.createElement("div");
                tooltip.className = "tooltip";
                tooltip.setAttribute('data-tip', `e.g.: ${data[0][field]}`);
        
                const fixer = document.createElement("div");
                fixer.className = "hidden";
        
                const badge = document.createElement("div");
                badge.className = "badge badge-primary cursor-pointer";
                badge.classList.add('text-xs');
                badge.innerHTML = `+ {${field}}`;
        
                tooltip.innerHTML = fixer.outerHTML + badge.outerHTML + fixer.outerHTML;
                badgeDiv.appendChild(tooltip);
            }
            }
            badgeDiv.innerHTML += badge_fixer;

            checkFieldsAndUpdateStyle();
        
            if (badge_container_has_badge) {
            badgeContainer.classList.remove("hidden");
            } else {
                badgeContainer.classList.add("hidden");
                badgeDiv.innerHTML = '';
                return;
            }
        
            const badges = document.querySelectorAll('.badge');
            badges.forEach(badge => {
                badge.addEventListener('click', () => {
                    if (range) {
                        const field = `${badge.innerText.substring(2)}`;
                        quill.insertText(range.index, field);
                        range.index += field.length;
                    }
                });
            });
        },
        function() {/* Not complated codes here */}
        );
    });

    quill.on('text-change', function(delta, oldDelta, source) {
        if (source == 'user') {
            range = quill.getSelection();
            if(range === null) {
                range = {'index':0, 'length':0};
            }
        }
    });
/** END BADGES **/


